// <auto-generated />
using System;
using DataAccessLayer.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(EnterScoreXContext))]
    [Migration("20230718142233_mig1")]
    partial class mig1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EntityLayer.Concrete.Goal", b =>
                {
                    b.Property<int>("GoalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GoalID"), 1L, 1);

                    b.Property<int>("GoalTime")
                        .HasColumnType("int");

                    b.Property<int>("MatchID")
                        .HasColumnType("int");

                    b.Property<int>("PlayerID")
                        .HasColumnType("int");

                    b.HasKey("GoalID");

                    b.HasIndex("MatchID");

                    b.HasIndex("PlayerID");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Match", b =>
                {
                    b.Property<int>("MatchID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MatchID"), 1L, 1);

                    b.Property<int?>("AwayTeamID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("HomeTeamID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("MatchDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StadiumID")
                        .HasColumnType("int");

                    b.HasKey("MatchID");

                    b.HasIndex("AwayTeamID");

                    b.HasIndex("HomeTeamID");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Player", b =>
                {
                    b.Property<int>("PlayerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayerID"), 1L, 1);

                    b.Property<DateTime>("PlayerBirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PlayerImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlayerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlayerNationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayerNumber")
                        .HasColumnType("int");

                    b.Property<string>("PlayerPosition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeamID")
                        .HasColumnType("int");

                    b.HasKey("PlayerID");

                    b.HasIndex("TeamID");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("EntityLayer.Concrete.PlayerStatistic", b =>
                {
                    b.Property<int>("PlayerStatisticID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayerStatisticID"), 1L, 1);

                    b.Property<int?>("GameTime")
                        .HasColumnType("int");

                    b.Property<int>("GoalScore")
                        .HasColumnType("int");

                    b.Property<int>("PlayerID")
                        .HasColumnType("int");

                    b.HasKey("PlayerStatisticID");

                    b.HasIndex("PlayerID");

                    b.ToTable("PlayerStatistics");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Result", b =>
                {
                    b.Property<int>("ResultID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResultID"), 1L, 1);

                    b.Property<int>("AwayTeamID")
                        .HasColumnType("int");

                    b.Property<int>("HomeTeamID")
                        .HasColumnType("int");

                    b.Property<int>("MatchID")
                        .HasColumnType("int");

                    b.HasKey("ResultID");

                    b.HasIndex("AwayTeamID");

                    b.HasIndex("HomeTeamID");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Stadium", b =>
                {
                    b.Property<int>("StadiumID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StadiumID"), 1L, 1);

                    b.Property<string>("Capacity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StadiumName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StadiumURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StadiumID");

                    b.ToTable("Stadiums");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Team", b =>
                {
                    b.Property<int>("TeamID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamID"), 1L, 1);

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TeamID");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("EntityLayer.Concrete.TeamStatistic", b =>
                {
                    b.Property<int>("TeamStatisticID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamStatisticID"), 1L, 1);

                    b.Property<int?>("Average")
                        .HasColumnType("int");

                    b.Property<int?>("DefeatNumber")
                        .HasColumnType("int");

                    b.Property<int?>("DrawNumber")
                        .HasColumnType("int");

                    b.Property<int>("GoalConceded")
                        .HasColumnType("int");

                    b.Property<int>("GoalScored")
                        .HasColumnType("int");

                    b.Property<int>("Point")
                        .HasColumnType("int");

                    b.Property<int>("TeamID")
                        .HasColumnType("int");

                    b.Property<int?>("VictoryNumber")
                        .HasColumnType("int");

                    b.HasKey("TeamStatisticID");

                    b.HasIndex("TeamID");

                    b.ToTable("TeamStatistics");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Goal", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Match", "Match")
                        .WithMany()
                        .HasForeignKey("MatchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.Player", "player")
                        .WithMany()
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("player");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Match", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Team", "AwayTeam")
                        .WithMany("AwayMatches")
                        .HasForeignKey("AwayTeamID")
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.Team", "HomeTeam")
                        .WithMany("HomesMatches")
                        .HasForeignKey("HomeTeamID")
                        .IsRequired();

                    b.Navigation("AwayTeam");

                    b.Navigation("HomeTeam");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Player", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EntityLayer.Concrete.PlayerStatistic", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Result", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Team", "AwayTeam")
                        .WithMany("AwayResult")
                        .HasForeignKey("AwayTeamID")
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.Team", "HomeTeam")
                        .WithMany("HomesResult")
                        .HasForeignKey("HomeTeamID")
                        .IsRequired();

                    b.Navigation("AwayTeam");

                    b.Navigation("HomeTeam");
                });

            modelBuilder.Entity("EntityLayer.Concrete.TeamStatistic", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Team", b =>
                {
                    b.Navigation("AwayMatches");

                    b.Navigation("AwayResult");

                    b.Navigation("HomesMatches");

                    b.Navigation("HomesResult");
                });
#pragma warning restore 612, 618
        }
    }
}
